# These settings set the maximum size of upload for services. These properties also effect the maximum size of DB update as well.

spring.servlet.multipart.max-file-size=256MB
spring.servlet.multipart.max-request-size=256MB

# The URL of eureka service
eureka.client.serviceUrl.defaultZone=http://cc-eureka:8761/eureka/
 
# Security provider chooses what settings to use for user authentication
# IN_MEMORY small number of predefined user, only for testing purposes.
# ANONYMOUS no login required.
# LDAP uses LDAP server to log in users
# ACTIVE_DIRECTORY Uses Microsoft's Active Direcotry service for authentication
common.securityProviderName=IN_MEMORY
 
# If this setting is set to true then the service only accepts HTTPS connections.
common.securityProviderSecure=false
 
#If this is set to false then only HTTPS connections with valid certificates will be accepted.
common.securityProviderAllowUnsignedCert=true
 
# Specify that URLs requires a specific IP Address or http://forum.springsource.org/showthread.php?102783-How-to-use-hasIpAddress&p=343971#post343971 subnet.
# the ip address (i.e. 192.168.1.79) or local subnet (i.e. 192.168.0/24) if it is left empty then every IP can access the services.
common.securityProviderAllowedIp=
 
# If the servers know nothing about a job, then they mark it as dead, and reschedule to process. You can set this checking interval in milliseconds
# through this variable.
common.deadJobTreshold=120000
 
# If you use ACTIVE_DIRECTORY, then you can set it's configuration like this: {"servers":[{"domain":"your.domain","url":"ldap://server.domain.com"}]}
# This is a standard JSON but it has to be in one line. The "servers" property references an array. In this array you can set as many Active Directory
# servers as you want. These servers will be checked in this specified order, and the first AD server that can authenticate the user will authenticate.
common.activeDirectoryConfig={"servers":[{"domain":"your.domain","url":"ldap://server.domain.com"}]}

# If you use LDAP, then you can set it's configuration like this: 
# {"servers":[{"serverUrl":"ldap://ldap.server.com:389/dc=test,dc=tld","userDNPatterns":["uid={0},cn=users,cn=accounts"],"groupSearchBase":"","managerDN":"uid=cchecker,cn=sysaccounts","managerPassword":"password"}]}
# This is a standard JSON but it has to be in one line. The "servers" property references an array. In this array you can set as many LDAP servers as you want. 
# These servers will be checked in this specified order, and the first LDAP server that can authenticate the user will authenticate it.
# The properties stands for the following:
# "serverURL" -- The URL of the LDAP server
# "userDNPatterns" -- The domain name of the users in the LDAP tree
# "groupSearchBase" -- Domain name of groups in LDAP tree
# "managerDN' -- The domain name of the manager user to query LDAP tree.
# "managerPassword" -- The password of manager user.
common.ldapConfig = {"servers":[{"serverUrl":"ldap://ldap.server.com:389/dc=test,dc=tld","userDNPatterns":["uid={0},cn=users,cn=accounts"],"groupSearchBase":"","managerDN":"uid=cchecker,cn=sysaccounts","managerPassword":"password"}]}

# If you are using IN_MEMORY authentication manager, you can configure it here:
common.inMemoryConfig = {"users":[{"name":"user", "password": "password", "roles":["USER"]}, {"name":"admin", "password": "adminPass", "roles":["USER","ADMIN"]}, {"name":"contentmanager", "password": "password", "roles":["USER","CONTENT_MANAGER"]}, {"name":"expertuser", "password": "password", "roles":["USER","EXPERT_USER"]}, {"name":"system", "password": "system", "roles":["SYSTEM"]}]}
# You can map user groups to ROLEs in CC by this setting. We have 3 roles:
# USER: everybody who can authenticate to CC.
# ADMIN: everybody who can manage CC.
# SYSTEM: special group to run automatic system checks.
# This is a standard JSON but it has to be in one line. For every property you can add concrete group or role names and also any regular expression to map your users.
# In this example everybody will have USER privileges, and users with the group (or role) cc-admin will have ADMIN privileges (every user with the group cc-system will 
# have SYSTEM privileges as well).
common.rolesToGroupsMap={"userGroups":[],"userPattern":".*","adminGroups":["cc-admin"],"adminPattern":"","contentManagerGroups":["cc-content-manager"],"contentManagerPattern":"","expertUserGroups":["cc-expert-user"],"expertUserPattern":"","systemGroups":["cc-system"],"systemPattern":""}
# For automated system communication we need to have a user that can log in to the services.
# this is a very limited privilege user, that we call System user. This user will use one of 
# the above mentioned authentication providers, so you must register it in your LDAP / AD server.
common.systemUser=system
common.systemPassword=system
 
# Search always runs on all available core. If you set this property to PARALLEL, then the system will distinct executors, one for all cores, that can boost the over all system
# performance and can cause a massive CPU load on server. If you use SEQUENTIAL execution strategy then only one executor will run on the server. (For search this executor will
# use all cores, but it creates a smaller CPU load.)
executionStrategy=PARALLEL
 
# This size determines how many molecules are check in one run.
# If you upload a file with 1000 molecules, and set this property to 25 then the file will be cut to 40 pieces, and 40 executors can start working simultaneously.
chunkSize=10
 
# Host of the database
databaseHost=cc-db
 
# The port where MongoDB listens for requests
databasePort=27017
 
# The name of database in MongoDB
databaseName=ccDB
 
# Username of database user.
mongoUser=cxnMongo
 
# Password of database user.
mongoPassword=ccMongoPass

# Set this property to true in case you are using Transport Encryption in your database. https://docs.mongodb.com/v3.0/core/security-transport-encryption/
mongoEncryptConnection = false
 
# Compliance Checker services use Hystrix circuit breaker to protect servers from overload.
# You can read more about hystrix settings here: https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix.command.default.execution.timeout.enabled=true
hystrix.threadpool.default.coreSize=10
hystrix.shareSecurityContext=true
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=15000
hystrix.threadpool.default.maxQueueSize=100
hystrix.threadpool.default.queueSizeRejectionThreshold=90


# Communication is load-balanced through Ribbon classes.
# You can read about ribbon settings here: https://github.com/Netflix/ribbon/wiki/Programmers-Guide
ribbon.ReadTimeout=16000

#The URL of the latest database file
common.autoUpdateUrl=https://dl.chemaxon.com/cchecker/cc-database.jar

#The URL of the text file containing the version of the latest database file
common.autoUpdateVersionUrl=https://dl.chemaxon.com/cchecker/cc-version.txt

common.autoUpdateEnabled=true

# Enables to schedule the knowledge base update automatically.
# The value should be a cron-like expression, which extends the usual UN*X definition to include triggers
# on the second as well as minute, hour, day of month, month and day of week. 
# Example patterns:
#	"0 0 * * * *" = the top of every hour of every day.
#	"*/10 * * * * *" = every ten seconds.
#	"0 0 8-10 * * *" = 8, 9 and 10 o'clock of every day.
#	"0 * 6,19 * * *" = 6:00 AM and 7:00 PM every day.
#	"0 0/30 8-10 * * *" = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day.
#	"0 0 9-17 * * MON-FRI" = on the hour nine-to-five weekdays
#	"0 0 0 25 12 ?" = every Christmas Day at midnight
#common.autoUpdateScheduler=0 0 0 * * MON-FRI

spring.profiles.active=native,production

# Enables to schedule the removal of all check related data from the database.
# The value should be a cron-like expression, which extends the usual UN*X definition to include triggers
# on the second as well as minute, hour, day of month, month and day of week. 
# Example patterns:
#	"0 0 * * * *" = the top of every hour of every day.
#	"*/10 * * * * *" = every ten seconds.
#	"0 0 8-10 * * *" = 8, 9 and 10 o'clock of every day.
#	"0 * 6,19 * * *" = 6:00 AM and 7:00 PM every day.
#	"0 0/30 8-10 * * *" = 8:00, 8:30, 9:00, 9:30 and 10 o'clock every day.
#	"0 0 9-17 * * MON-FRI" = on the hour nine-to-five weekdays
#	"0 0 0 25 12 ?" = every Christmas Day at midnight
#batch.cleanup.scheduler=0 0 4 * * *

# The default report format for batch checks. Valid values are: HTML,PDF,SDF,MRV,XLSX
#batch.default.reportFormat=HTML

# The default view for Regulation Categories. Valid values are: COUNTRIES, CHECK_LEVELS
#check.default.regulationCategories=CHECK_LEVELS

# Setting this to true will only display the check levels as selectable categories on the check pages
#check.hideCountries=true

# Comma separated list of fields to be included in the JSON reports.
# Including only needed fields in JSON reports can greatly increase the speed of report generation
# To include child fields, parent fields also have to be listed
# If non of the listed fields are present in the result, or the config key is not set then the full result will be added to the report 
# Example:
# [  
#   [  
#      {  
#         "segments":[  
#            {  
#               "categoryName":"catName",
#               "categoryCode":1234
#            }
#         ],
#         "inputProperties":{  
#            "ID":"123",
#			 "Name":"Name"
#         }
#      }
#   ]
# ]
# To include only the categoryCode and ID in the JSON report from the above example result, the following configuration has to be made:
#json.report.fields=segments,categoryCode,inputProperties,ID
   
# The maximum number of heavy atoms in a molecule that should be checked. 
check.structure.maxAtomCount=200

# Time limit in milliseconds for checking compliance of one target molecule against all selected rules. If check reaches this limit then 
# search with the given target is stopped and it is added to the list of errors. 
searchEngine.check.timeLimit=60000

# Time limit in milliseconds for checking compliance of one target molecule against one query substance. If the check against a substance
# reaches this limit then checking the given target is stopped and the given target molecule is added to the list of errors. 
searchEngine.molSearch.timeLimit=10000

# Time limit in milliseconds for report generation. In case report generation did not finish within the defined time limit,
# application retries to generate it.
report.recovery.time=3600000

# To enable special fonts (e.g Japanese) in Pdf reports, download the appropriate font file and place it under <$JAVA_HOME>/lib/fonts/ library,
# and setup file name here, e.g NotoSansCJKjp-Regular.otf for Japanese
report.font.name=LucidaTypewriterRegular.ttf

# Whether retry is enabled on connection error
ribbon.OkRetryOnConnectionErrors=true
# Whether all operations can be retried for this client
ribbon.OkToRetryOnAllOperations=true
# Max number of next servers to retry (excluding the first server)
ribbon.MaxAutoRetriesNextServer=2
# Max number of retries on the same server (excluding the first try)
ribbon.MaxAutoRetries=0
# Interval to refresh the server list from the source
ribbon.server-list-refresh-interval=30000
# List of response codes you would like the Ribbon client to retry
ribbon.retryableStatusCodes=503
